{"mappings":"AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,UAAWL,SAASC,cAAc,iBAGpC,IAAIK,EAEAC,EAuBJ,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,CAACG,SAAAT,EAAUU,MAAAT,IAEnBM,EAAO,CAACE,SAAAT,EAAUU,MAAAT,GAAO,GAE1BA,GAEI,CAACQ,SAAAT,EAAUU,MAAAT,MAIZU,MAAK,EAACF,SAAEA,EAAUC,MAAAE,MACxBC,QAAQC,IAAI,uBAAqBL,QAAiBG,MAAU,IAE7DG,OAAM,EAACN,SAAEA,EAAUC,MAAAM,MAClBH,QAAQC,IAAI,sBAAoBL,QAAeO,MAAU,G,CAvC7D3B,EAAKC,KAAK2B,iBAAiB,UAE3B,SAAqBC,GACnBA,EAAIC,iBAGFtB,EAAQuB,OAAO/B,EAAKI,WAAW4B,OAC/BvB,EAAkBsB,OAAO/B,EAAKM,YAAY0B,OAC1CC,KAAOF,OAAO/B,EAAKK,UAAU2B,OAC7B,IAAIZ,EAAW,EAEf,IAAI,IAAIc,EAAI,EAAGA,GAAKzB,EAAiByB,IACnCxB,EAAcU,EAAUZ,GACxBgB,QAAQC,IAAI,aAAcL,EAAW,WAAYZ,GACjDA,GAASyB,KACTb,GAAW,C","sources":["src/js/03-promises.js"],"sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('.form button')\n}\n\nlet delay;\nlet amount;\nlet currentPosition;\n\nlet formData = {};\nrefs.form.addEventListener('submit', onSubmitEvt);\n\nfunction onSubmitEvt(evt){\n  evt.preventDefault();\n    // const {elements: {delay, step, amount}} = evt.currentTarget;\n    // console.log(delay.value, step.value, amount.value);\n    delay = Number(refs.delayInput.value);\n    currentPosition = Number(refs.amountInput.value);\n    step = Number(refs.stepInput.value);\n    let position = 1;\n\n    for(let i = 1; i <= currentPosition; i++){\n      createPromise(position, delay);\n      console.log('position: ', position + ' delay: ', delay)\n      delay += step;\n      position +=1;\n    }\n};\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n\n    return {position, delay};\n  });\n\n\n  promise.then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n"],"names":["$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","submitBtn","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$currentPosition","$47d4ff9957288465$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","then","delay2","console","log","catch","delay3","addEventListener","evt","preventDefault","Number","value","step","i"],"version":3,"file":"03-promises.fdb1ddd9.js.map"}